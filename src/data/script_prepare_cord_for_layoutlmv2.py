# -*- coding: utf-8 -*-
"""Prepare CORD for LayoutLMv2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/NielsRogge/Transformers-Tutorials/blob/master/LayoutLMv2/CORD/Prepare_CORD_for_LayoutLMv2.ipynb

# # Analysis
#
# Let's look at one particular example of the CORD dataset.
# """

"""# Generating the dataset"""

from tqdm import tqdm
import os
import json

def normalize_bbox(bbox, width, height):
     return [
         int(1000 * (bbox[0] / width)),
         int(1000 * (bbox[1] / height)),
         int(1000 * (bbox[2] / width)),
         int(1000 * (bbox[3] / height)),
     ]

def generate_annotations(path: str):
  annotation_files = []
  for js in tqdm(os.listdir(path)):
    with open(path + js) as f:
        annotation_files.append(json.load(f))
  
  words = []
  boxes = []
  labels = []
  for js in tqdm(annotation_files):
      words_example = []
      boxes_example = []
      labels_example = []

      width, height = js['meta']['image_size']['width'], js['meta']['image_size']['height']
      # loop over OCR annotations
      for elem in js['valid_line']:
          for word in elem['words']:
              # get word
              txt = word['text']

              # get bounding box
              # important: each bounding box should be in (upper left, lower right) format
              # it took me some time to understand the upper left is (x1, y3)
              # and the lower right is (x3, y1)
              x1 = word['quad']['x1']
              y1 = word['quad']['y1']
              x3 = word['quad']['x3']
              y3 = word['quad']['y3']
              
              box = [x1, y1, x3, y3]
              box = normalize_bbox(box, width=width, height=height)

              # ADDED
              # skip empty word
              if len(txt) < 1: 
                continue
              if min(box) < 0 or max(box) > 1000: # another bug in which a box had -4
                continue
              if ((box[3] - box[1]) < 0) or ((box[2] - box[0]) < 0): # another bug in which a box difference was -12
                continue
              # ADDED

              words_example.append(txt)
              boxes_example.append(box) 
              labels_example.append(elem['category'])
      words.append(words_example) 
      boxes.append(boxes_example)
      labels.append(labels_example)
  
  return words, boxes, labels

"""Let's apply the function above for the training, validation and test set:"""

train_path = "data_dvc/CORD/train/json/"
val_path = "data_dvc/CORD/dev/json/"
test_path = "data_dvc/CORD/test/json/"

words_train, boxes_train, labels_train = generate_annotations(train_path)
words_val, boxes_val, labels_val = generate_annotations(val_path)
words_test, boxes_test, labels_test = generate_annotations(test_path)

"""# Saving"""

import pickle
with open("data_dvc/CORD/CORD_layoutlmv2_format/train.pkl", 'wb') as t:
    pickle.dump([words_train, labels_train, boxes_train], t)
with open("data_dvc/CORD/CORD_layoutlmv2_format/dev.pkl", 'wb') as t:
    pickle.dump([words_val, labels_val, boxes_val], t)
with open("data_dvc/CORD/CORD_layoutlmv2_format/test.pkl", 'wb') as t:
    pickle.dump([words_test, labels_test, boxes_test], t)